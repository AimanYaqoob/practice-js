contract Mapping {
    mapping(address => uint) public myMap;

    function get(address _addr) public view returns (uint) {
        return myMap[_addr];
    }

    function set(address _addr,uint _i) public {
        myMap[_addr]=_i;
    }

    function remove(address _addr) public{
        delete myMap[_addr];
    }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.15;
contract NestedMapping{
    mapping(address => mapping(uint => bool)) public nested;

    function get(address _addr , uint _i) public view returns (bool) {
        return nested [_addr][_i];
    } 

    function set(address _addr,uint _i,bool _boo) public {
        nested [_addr][_i]=_boo;
    }

    function remove(address _addr, uint _i) public {
        delete nested [_addr][_i];
    }
}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.15;
contract practice{
 mapping (address => uint256) balances;

 function updateBalance(uint256 balanceToUpdate) public {
   balances[msg.sender]=balanceToUpdate;
 }

 function checkBalance(address _user) public view returns (uint256){
   require(msg.sender==_user, "You are not the owner of the account");
   return balances[_user];
 }
}


