// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.15;


// contract prpperty{
    // bytes1 public a1;
    // bytes2 public a2;
    // bytes3 public a3;
    // bytes4 public a4;
    // uint[3] public Number=[10,20,30];

    // function  setBytes() public { //bytes store value in hexadecimal
    //     a1="a";
    //     a2="ab";
    //     a3="abc";
    //     a4="abcd";
    // }

    // function setNumber(uint index , uint value) public {
    //     Number[index]=value;
    // }

    // function getLength() public view returns(uint){
    //     return Number.length;
    // }
     


     //&&&&&&&&&&&&&&&&******fixed and dynamic size array*******&&&&&&&&&&&&&&//
    // uint[] public numbers;

    // function getLength() public view returns(uint) {
    //     return numbers.length;
    // }
    
    // function pushElement(uint item) public {
    //     numbers.push(item);
    // }

    // function popElement() public {
    //     numbers.pop();
    // }

    // function f1() public {//memory par dynamic array ko declare kia h r dynamic m hm kch add nh kr skte
    //     uint[] memory y=new uint[](3);
    //     y[0]=10;
    //     y[1]=20;
    //     y[2]=30;
    //     numbers=y;
    // }


    //   bytes public b1="abc";
    //   string public s1="abc";

    //   function addElement() public {
    //       b1.push("d");
    //   }

    //   function getElement(uint i) public view returns (bytes1){
    //       return b1[i];
    //   }




    //&&&&&&&&&&&&&&&*****LOOPS**********&&&&&&&&&&&//
    //HM KSI BH TARH K LOOP KO FUNCTION K BAGAIR NH LOKH SKTE//
    // uint[4] public  arr=[1,2,3,4];
    // uint public sum=0;

    // function loop() public {
    //     uint count=0;
    //     while(count < arr.length) {
    //         sum=sum+arr[count];
    //         count++;
    //     }
    // }

    // function loop() public {
    //         for(uint count=0 ; count<arr.length ; count++){
    //         sum=sum+arr[count];
    //           }
    //       }

    // function loop() public {
    //     uint count=0;
    //     do{
    //         sum=sum+arr[count];
    //         count++;
    //     } while (count < arr.length);
    // }





    //&&&&&&&&&&&&&&&***********MEMORY AND STORAGE WORKING IN ARRAY**********&&&&&&&&&&&&7//
    // string[] public programs=["java","python","c++"];

    // function mem() public  view {
    //     string[] memory p1=programs;
    //     p1[0]="javaScript";
    // }

    // function sto() public {
    //     string[] storage p1=programs;
    //     p1[0]="javaScript";
    // }


//&&&&&&&&&**********STRUCTUR***********&&&&&&&&&&&&&&&&////
//      struct Instructor {
//     uint age;
//     string name;
//     address addr;
// }  

// contract Academy {
//     Instructor public academyInstructor;
//     constructor (uint _age, string memory _name){
//         academyInstructor.age=_age;
//         academyInstructor.name=_name;
//         academyInstructor.addr=msg.sender;
//     }

//     function changeInstructor(uint _age, string memory _name, address _addr) public {
//         Instructor memory myInstructor = Instructor({
//             age : _age,
//             name : _name,
//             addr : _addr
//         });
//         academyInstructor = myInstructor;
//     }
// }

// contract School {

// }




//%%%%%%%%********ENUM*******&&&&&&&&&&&&///////////
// contract demo {
//     enum user{allowed, not_allowed, wait}

//     user public u1=user.wait;
//     uint public lottery=1000;

//     function check() public {
//         if(u1 == user.allowed){
//             lottery=0;
//         }
//     }
//     function changeOwner() public {
//         u1=user.allowed;
//     }
// }



//&&&&&&&&&&********MAPPING*********&&&&&&&&&
// contract myContract{
//     mapping(uint => string) public student;

//     function input(uint roll, string memory name) public {
//         student[roll]=name;
//     }
// }


////////&&&&&&&&&******INHERITANCE*******&&&&&&&&&
// contract Parent{
//     string public str;
//     address public manager;

//     constructor(){
//         str="AIMAN";
//         manager=msg.sender;
//     }
//     function setter(string memory _str) public {
//         str=_str;
//     }
// }

// contract child is Parent{
//     uint public  x;
// }


///&&&&&&&&&&***********ABSTRACT CONTRACTS************&&&&&&&&&&&&&
//sirf function implementation hoti h r kvh nh btate abstract me at least aik aisa function lazmi ho
//jiski implementation nh hoe we ho 
// abstract contract Parent{
//     string public str;
//     address public manager;

//     constructor(){
//         str="AIMAN";
//         manager=msg.sender;
//     }
//     function setter(string memory _str) public virtual ;//jha implementation  nh hoe we h waha virtual likhhe ge
// }

// contract child is Parent{
// // ya to contract s phle abstract declare kre g warna jis function k implementation nh de the usko
// //decalre kre g llkin sath m override bh likhe g yahe syntax h iska r iska maqsad h wo function jo
// //hm n decalare nh kia tha phle ab yha usko override krhe h yani decalre    
//     uint public  x;
//     function setter(string memory _str) public override {
//         str=_str;
//     }
// }



//&&&&&&&&&**********INTERFACE********&&&&&&&&&&&
//agr ksi chez ko inteface ko decalre k hoe h to sirf us s h inherit kr skte h aisa nh ho skta  k
// ksi r contract s krlen
//state variable cant decalarre , constructor cant be declare
//functions can be deaclared but not implemented and declartion should be external
//interface Parent{
    // string public str;
    // address public manager;

    // constructor(){
    //     str="AIMAN";
    //     manager=msg.sender;
    // }
//     function setter(string memory _str) external ;
// }
    
// contract child is Parent{
//      function setter(string memory _str) public override {
        
//     }
// }




//&&&&&&*******POLYMORPHISM*****&&&&&&&&&&&&&///
//agr same functions lkin arguments change ho to user ko nh pta k usko kn sa function pr kitna argument 
//dena h to y chez polymorphism k through decide kia jata h  
// contract Project{

//     function sum(uint a , uint b) public pure returns(uint){
//         return a+b;
//     }

//     function sum(uint a , uint b, uint c) public  pure returns (uint){
//         return  a+b+c;
//     }

//     function sum(string memory a, string memory b) public  pure  returns (string memory){
//         b="Hello";
//         return a;
//     }
// }


//&&&&&&&&&&&*************VISIBILITY SPECIFIER*********%%%%%%%%%%%%%//
// contract Parent {
//     function f1() public pure returns (uint){
//         return 1;
//     }
//     function f2() private pure returns (uint){ //contract k andar use hon skta h lkin bahar nh na h inherit hoga
//         return 2;
//     }
//     function f3() internal pure returns (uint){ //y bh us contract k andar use hoga,inherit bh hoga lkin
//     // bahar ksi contrcat m use nh hoga
//         return  3;
//     }
//     function f4() external pure returns (uint){ //within function/(contract wo jo inherit ho us m) is 
//     //not available
//         return 4;
//     }
// }
// contract Child is Parent { //derived contract
    
// }
// contract demo { //other contract
//     Parent parent=new Parent();//class ko decalre krne k lie new likhte h to wo aik method ban jata h
//     uint public y=parent.f1();
// }


//&&&&&&&&&&&&**********REQUIRE******&&&&&&&&&&//
//wo chez lazmi ho jb h kro
// contract demo {
//     address public owner;

//     constructor(){
//         owner=msg.sender;
//     }
//     function get() public view returns (uint){
//         require(owner==msg.sender,"You are not the owner");
//         //is m hm aik sath if else lga skte h phle if bd m else but alg s if else k loop usw kre g to wo 
//         //gas cost kre ga
//         return 10;
//     } 
// }


//&&&&&&&&***********MODIFIER**********&&&&&&&&&&&&&&//
//us chex k jis k hame within the contract bar bar zarorat par rh h usko as a modifier decalre kre g r 
//sko h phr use krte rahe g
// contract demo{
//     address public owner;

//     constructor (){
//         owner=msg.sender;
//     }
//     modifier onlyOwner(){
//         require(owner==msg.sender, "You are not the owner");
//         _;
//     }
//     function get10() public view onlyOwner returns(uint){
//         return 10;
//     }
//     function get20() public view onlyOwner returns(uint){
//         return 20;
//     }
//     function get30() public view onlyOwner returns(uint){
//         return 30;
//     }
// }


//&&&&&&&&&&&&*******EVENT************&&&&&&&&&&&//
//jo bh chez browser m trigger krti h wo event h
//solodity m jb transcation ho jati h to us chez ko hm as s event trigger krte h
//agr hm e-commerce k website pr ksi ka anme dal de g to wo gas cost kre g jitni bar user ae ga itna zaida 
//to us s bachne k lie events banate h jo smart contract k sath intercation kr k logs(khata) banata rhta h 
//r is s hame sb pta chlta h k kn user aia kitne paise die kia adress tha and all jo k blocks m h store hote
// h lkin smart contrcat m nh jate to gas cost nh hoiti 
contract demo{
    string public str;

    event register(address manager , string char);

    function setter(string memory _str) public {
        str=_str;
        emit register(msg.sender, str);
    } 
}



//&&&&&&&&&&&&&*********PAYABLE FUCNTIONS********&&&&&&&&&&&&&//
//jb bh smart contract me ether transfer krne h ya ksi s lene h to usko payable declare kre g
// contract demo{
//     function payEther() public payable {

//     }
//     function checkBalance() public view returns (uint){
//         return address(this).balance;
//     }
// }




//&&&&&&&&&&&&**********PAYABLE ADDRESS**********&&&&&&&&&&//
// contract demo{
//     address payable user=payable(0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db);

//     function payEther() public payable {

//     }
//     function checkBalance() public view returns (uint){
//         return address(this).balance;
//     }
//     function payEtherToAccount() public {
//         user.transfer(10 ether);
//     }
// }


